# run_full.py
import logging
import asyncio
from services.worker import SignalWorker
from services.identifier import PairIdentifier
from services.collector import DataCollector
from services.level_engine import LevelAnalyzer
from services.indicator_engine import IndicatorEngine
from services.trend_engine import TrendAnalyzer
from services.signal_engine import SignalEngine
from services.alert_engine import AlertSystem
from services.deep_an import MarketCapTracker
from database.database import DatabaseManager
from concurrent.futures import ThreadPoolExecutor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def main():
    logger.info("üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ + –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

    db = DatabaseManager()
    db.clear_old_candles()

    # –®–∞–≥ 1: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä
    await asyncio.gather(
        PairIdentifier().update_pairs_cache(),
        DataCollector().update_all_timeframes(),
        MarketCapTracker().fetch_total_market_cap()
    )

    def sync_analysis():
        LevelAnalyzer().analyze_levels()
        IndicatorEngine().compute_indicators()
        TrendAnalyzer().analyze_trends()
        SignalEngine().generate_signals()
        AlertSystem().check_alerts()

    def run_worker():
        worker = SignalWorker()
        return worker.process_all_pairs()

    loop = asyncio.get_running_loop()
    with ThreadPoolExecutor() as pool:
        await loop.run_in_executor(pool, sync_analysis)
        signals = await loop.run_in_executor(pool, run_worker)

    if signals:
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)} –∑–∞–ø–∏—Å–µ–π")
    else:
        logger.info("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏")



if __name__ == "__main__":
    asyncio.run(main())



import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor
from services.worker import SignalWorker

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    logger.info("üìä –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º")
    loop = asyncio.get_running_loop()

    def run_signals():
        worker = SignalWorker()
        return worker.process_all_pairs()

    with ThreadPoolExecutor() as pool:
        results = await loop.run_in_executor(pool, run_signals)

    if results:
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(results)}")
        for signal in results:
            logger.info(f"üü¢ {signal['symbol']} {signal['timeframe']} ‚Äî {signal['signal_type']} @ {signal['current_price']:.4f}")
    else:
        logger.info("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")

if __name__ == "__main__":
    asyncio.run(main())

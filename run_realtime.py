# run_realtime.py

import asyncio
import logging
from datetime import datetime, timedelta
from services.collector import DataCollector
from services.indicator_engine import IndicatorEngine
from services.signal_engine import SignalEngine
from database.database import DatabaseManager

logger = logging.getLogger("realtime")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s", "%H:%M:%S"))
logger.addHandler(handler)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
UPDATE_INTERVAL = 300

async def update_symbol_tf(symbol, timeframe):
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {symbol} / {timeframe}")

        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
        updated = await DataCollector().update_one(symbol, timeframe)
        if not updated:
            logger.info(f"‚è≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol} / {timeframe}")
            return

        # 2. –ü–µ—Ä–µ—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        IndicatorEngine().compute_single(symbol, timeframe)

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        SignalEngine().generate_single(symbol, timeframe)

        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {symbol} / {timeframe}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {symbol} / {timeframe}: {e}")

async def realtime_loop():
    db = DatabaseManager()
    symbols = db.get_symbols_from_cache()
    timeframes = ["1d", "4h", "1h", "15m", "5m"]

    while True:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        tasks = []
        now = datetime.utcnow()

        for symbol in symbols:
            for tf in timeframes:
                # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                tasks.append(update_symbol_tf(symbol, tf))

        await asyncio.gather(*tasks)
        logger.info("üõë –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ø–∏–º...")
        await asyncio.sleep(UPDATE_INTERVAL)

if __name__ == "__main__":
    asyncio.run(realtime_loop())
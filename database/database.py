# database/database.py
import os
import logging
import psycopg2
from psycopg2 import pool
from datetime import datetime, timedelta
from psycopg2.extras import execute_values
import json
import numpy as np
from datetime import datetime
import time
import re

from config.constants import DB_CONFIG  # —Ç–µ–ø–µ—Ä—å —Ç–∞–∫

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self):
        logger.debug("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabaseManager")
        self.db_config = {
            'dbname': os.getenv('DB_NAME', 'postgres'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', '123'),
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': os.getenv('DB_PORT', '5432')
        }
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        self.connection_pool = psycopg2.pool.ThreadedConnectionPool(
            minconn=5,
            maxconn=20,
            **self.db_config
        )
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        self._create_tables()
        self._create_indexes()
        logger.info("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    def get_connection(self):
        return self.connection_pool.getconn()

    def release_connection(self, conn):
        self.connection_pool.putconn(conn)

    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü, –æ—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∫–æ–Ω—Ü–µ"""
        # --- –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü ---
        start_time = time.time()
        ddl_queries = [
            # –¢–∞–±–ª–∏—Ü–∞ collected_candles
            """
            CREATE TABLE IF NOT EXISTS collected_candles (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL,
                timeframe VARCHAR(5) NOT NULL,
                candles JSONB NOT NULL,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE (symbol, timeframe)
            );
            """,

            # –¢–∞–±–ª–∏—Ü–∞ levels
            """
            CREATE TABLE IF NOT EXISTS levels (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL,
                timeframe VARCHAR(5) NOT NULL,
                price DECIMAL(20,8) NOT NULL,
                type VARCHAR(10) NOT NULL,
                strength INT NOT NULL,
                upper DECIMAL(20,8),
                lower DECIMAL(20,8),
                distance DECIMAL(10,4),
                touched INT DEFAULT 0,
                broken BOOLEAN DEFAULT FALSE,
                last_touched TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,

            # –¢–∞–±–ª–∏—Ü–∞ alerts
            """
            CREATE TABLE IF NOT EXISTS alerts (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20),
                level_price DECIMAL(20,8),
                current_price DECIMAL(20,8),
                type VARCHAR(20),
                distance DECIMAL(10,4),
                strength INT,
                timeframe VARCHAR(10),
                source VARCHAR(20),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,
            """
            ALTER TABLE alerts
            ADD COLUMN IF NOT EXISTS source VARCHAR(20);
            """,

            # –¢–∞–±–ª–∏—Ü–∞ pairs_cache
            """
            CREATE TABLE IF NOT EXISTS pairs_cache (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL,
                volume DECIMAL(20,8) NOT NULL,
                first_seen TIMESTAMP,
                last_seen TIMESTAMP,
                missing_periods INT DEFAULT 0
            );
            """,

            # –¢–∞–±–ª–∏—Ü–∞ trend_cache
            """
            CREATE TABLE IF NOT EXISTS trend_cache (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL UNIQUE,
                direction VARCHAR(10) NOT NULL,
                ema50 DECIMAL(20,8),
                ema200 DECIMAL(20,8),
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,

            # –¢–∞–±–ª–∏—Ü–∞ indicators
            """
            CREATE TABLE IF NOT EXISTS indicators (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL,
                timeframe VARCHAR(5) NOT NULL,
                indicator_type VARCHAR(20) NOT NULL,
                value DECIMAL(20,8),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,
            """
            ALTER TABLE IF EXISTS indicators
            ALTER COLUMN value TYPE VARCHAR(50)
            USING value::VARCHAR(50);
            """,
            # –í –º–µ—Ç–æ–¥ _create_tables, –≤ —Å–ø–∏—Å–æ–∫ ddl_queries –¥–æ–±–∞–≤—å—Ç–µ:
            """
            CREATE TABLE IF NOT EXISTS market_cap (
                id SERIAL PRIMARY KEY,
                total_cap DECIMAL(20,2) NOT NULL,
                fetched_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,

            # –¢–∞–±–ª–∏—Ü–∞ signals
            """
            CREATE TABLE IF NOT EXISTS signals (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(20) NOT NULL,
                timeframe VARCHAR(5) NOT NULL,
                signal_type VARCHAR(10) NOT NULL,
                price DECIMAL(20,8) NOT NULL,
                time BIGINT NOT NULL,
                indicator VARCHAR(50),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,
            """
            ALTER TABLE signals
            ADD COLUMN IF NOT EXISTS score INT,          
            ADD COLUMN IF NOT EXISTS details TEXT,
            ADD COLUMN IF NOT EXISTS recommendation VARCHAR(50),
            ADD COLUMN IF NOT EXISTS current_price DECIMAL(20,8);
            """,
        ]

        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                for i, query in enumerate(ddl_queries):
                    table_name = self._extract_table_name(query)
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    logger.info(f"[{timestamp}] ‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    cur.execute(query)
            conn.commit()
            duration = round(time.time() - start_time, 2)
            logger.info(
                f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(ddl_queries)} —Ç–∞–±–ª–∏—Ü –∑–∞ {duration} —Å–µ–∫.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}", exc_info=True)
            conn.rollback()
        finally:
            self.release_connection(conn)

    def _extract_table_name(self, query: str) -> str:
        import re
        match = re.search(r"(CREATE|ALTER)\s+TABLE(?: IF NOT EXISTS)?\s+(\w+)", query, re.IGNORECASE)
        return match.group(2) if match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_candles_symbol_timeframe ON collected_candles (symbol, timeframe);",
            "CREATE INDEX IF NOT EXISTS idx_candles_last_updated ON collected_candles (last_updated);",
            "CREATE INDEX IF NOT EXISTS idx_levels_symbol_timeframe ON levels (symbol, timeframe);",
            "CREATE UNIQUE INDEX IF NOT EXISTS idx_signals_unique ON signals (symbol, timeframe, signal_type, time);"
            "CREATE INDEX IF NOT EXISTS idx_levels_price ON levels (price);"
        ]
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                for idx in indexes:
                    cur.execute(idx)
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)

    def upsert_candles(self, symbol, timeframe, new_candles):
        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π {symbol} {timeframe}")
        try:
            conn = self.get_connection()
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤–µ—á–∏
                cur.execute("""
                            SELECT candles
                            FROM collected_candles
                            WHERE symbol = %s
                              AND timeframe = %s
                            """, (symbol, timeframe))
                result = cur.fetchone()
                # –£–±–∏—Ä–∞–µ–º json.loads, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã
                current_candles = result[0] if result else []
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
                existing_times = {candle['time'] for candle in current_candles}
                filtered_new = [
                    candle for candle in new_candles
                    if candle['time'] not in existing_times
                ]
                if not filtered_new:
                    logger.debug("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                    return len(current_candles)
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                merged = current_candles + filtered_new
                merged.sort(key=lambda x: x['time'])
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                max_candles = {
                    '1d': 900,
                    '4h': 800,
                    '1h': 700,
                    '15m': 500
                }.get(timeframe, 500)
                if len(merged) > max_candles:
                    merged = merged[-max_candles:]
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∞
                if result:
                    cur.execute("""
                                UPDATE collected_candles
                                SET candles      = %s,
                                    last_updated = CURRENT_TIMESTAMP
                                WHERE symbol = %s
                                  AND timeframe = %s
                                """, (json.dumps(merged), symbol, timeframe))
                else:
                    cur.execute("""
                                INSERT INTO collected_candles (symbol, timeframe, candles)
                                VALUES (%s, %s, %s)
                                """, (symbol, timeframe, json.dumps(merged)))
                conn.commit()
                return len(merged)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol} {timeframe}: {e}", exc_info=True)
            conn.rollback()
            return 0
        finally:
            self.release_connection(conn)

    def get_candles(self, symbol, timeframe):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                            SELECT candles
                            FROM collected_candles
                            WHERE symbol = %s
                              AND timeframe = %s
                            """, (symbol, timeframe))
                result = cur.fetchone()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                return result[0] if result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol} {timeframe}: {e}")
            return []
        finally:
            self.release_connection(conn)

    def get_all_candles(self, timeframe=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤–µ—á–µ–π (–ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º)"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                if timeframe:
                    cur.execute("""
                                SELECT symbol, timeframe, candles
                                FROM collected_candles
                                WHERE timeframe = %s
                                """, (timeframe,))
                else:
                    cur.execute("SELECT symbol, timeframe, candles FROM collected_candles")
                result = cur.fetchall()
                # –£–±–∏—Ä–∞–µ–º json.loads, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã
                return {(row[0], row[1]): row[2] for row in result}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤–µ—á–µ–π: {e}")
            return {}
        finally:
            self.release_connection(conn)

    def clear_old_candles(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–µ—á–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NULL"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                # –û—á–∏—â–∞–µ–º 1d —Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤
                cur.execute(""" 
                    UPDATE collected_candles
                    SET candles = COALESCE((
                        SELECT jsonb_agg(c)
                        FROM jsonb_array_elements(candles) AS c
                        WHERE (c ->> 'time')::BIGINT > EXTRACT(EPOCH FROM NOW() - INTERVAL '3 months') * 1000
                    ), '[]'::jsonb)
                    WHERE timeframe = '1d'
                """)

                # –û—á–∏—â–∞–µ–º 4h –∏ 1h —Å—Ç–∞—Ä—à–µ 1 –º–µ—Å—è—Ü–∞
                cur.execute(""" 
                    UPDATE collected_candles
                    SET candles = COALESCE((
                        SELECT jsonb_agg(c)
                        FROM jsonb_array_elements(candles) AS c
                        WHERE (c ->> 'time')::BIGINT > EXTRACT(EPOCH FROM NOW() - INTERVAL '1 month') * 1000
                    ), '[]'::jsonb)
                    WHERE timeframe IN ('4h', '1h')
                """)

                # –û—á–∏—â–∞–µ–º 15m —Å—Ç–∞—Ä—à–µ 2 –Ω–µ–¥–µ–ª—å
                cur.execute(""" 
                    UPDATE collected_candles
                    SET candles = COALESCE((
                        SELECT jsonb_agg(c)
                        FROM jsonb_array_elements(candles) AS c
                        WHERE (c ->> 'time')::BIGINT > EXTRACT(EPOCH FROM NOW() - INTERVAL '2 weeks') * 1000
                    ), '[]'::jsonb)
                    WHERE timeframe = '15m'
                """)

            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)

    def save_levels(self, levels):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –≤ –ë–î"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É—Ä–æ–≤–Ω–∏
                cur.execute("DELETE FROM levels")
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                insert_query = """
                               INSERT INTO levels
                               (symbol, timeframe, price, type, strength,
                                upper, lower, distance, touched, broken, last_touched)
                               VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) \
                               """
                for level in levels:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy.float64 –≤ float
                    price = float(level['price'])
                    distance = float(level.get('distance', 0.0))  # –î–æ–±–∞–≤–∏—Ç—å
                    cur.execute(insert_query, (
                        level['symbol'],
                        level['timeframe'],
                        price,
                        level['type'],
                        int(level['strength']),
                        float(level.get('upper')) if level.get('upper') else None,
                        float(level.get('lower')) if level.get('lower') else None,
                        distance,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                        int(level.get('touched', 0)),
                        bool(level.get('broken', False)),
                        datetime.fromtimestamp(level['last_touched']) if level.get('last_touched') else None
                    ))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)

    def get_levels(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –∏–∑ –ë–î"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT * FROM levels")
                columns = [desc[0] for desc in cur.description]
                return [dict(zip(columns, row)) for row in cur.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
            return []
        finally:
            self.release_connection(conn)

    def _get_unique_symbols(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –ë–î"""
        try:
            conn = self.get_connection()
            with conn.cursor() as cur:
                cur.execute("SELECT DISTINCT symbol FROM collected_candles")
                symbols = [row[0] for row in cur.fetchall()]
                return symbols
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä: {e}")
            return []
        finally:
            self.release_connection(conn)

    def get_symbols_from_cache(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫—ç—à–∞"""
        try:
            conn = self.get_connection()
            with conn.cursor() as cur:
                cur.execute("SELECT symbol FROM pairs_cache")
                return [row[0] for row in cur.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä –∏–∑ –∫—ç—à–∞: {e}")
            return []
        finally:
            self.release_connection(conn)

    def get_trend(self, symbol: str):
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT direction, ema50, ema200
                    FROM trend_cache
                    WHERE symbol = %s
                    ORDER BY last_updated DESC
                    LIMIT 1
                """, (symbol,))
                row = cur.fetchone()
                if row:
                    return {
                        "direction": row[0],
                        "ema50": float(row[1]),
                        "ema200": float(row[2])
                    }
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {symbol}: {e}")
            return {}
        finally:
            self.release_connection(conn)

    def save_trends(self, trends):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –ë–î"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∏
                insert_query = """
                               INSERT INTO trend_cache (symbol, direction, ema50, ema200, last_updated)
                               VALUES (%s, %s, %s, %s, TO_TIMESTAMP(%s)) ON CONFLICT (symbol) 
                    DO \
                               UPDATE SET
                                   direction = EXCLUDED.direction, \
                                   ema50 = EXCLUDED.ema50, \
                                   ema200 = EXCLUDED.ema200, \
                                   last_updated = EXCLUDED.last_updated \
                               """
                for symbol, data in trends.items():
                    cur.execute(insert_query, (
                        symbol,
                        data['direction'],
                        float(data['ema50']),
                        float(data['ema200']),
                        data['last_updated']
                    ))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)

    def get_current_price(self, symbol, timeframe):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è"""
        candles = self.get_candles(symbol, timeframe)
        if candles:
            return candles[-1]['close']
        return None

    def save_alerts(self, alerts):
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                for alert in alerts:
                    cur.execute("""
                                INSERT INTO alerts (symbol, level_price, current_price, type, distance, strength,
                                                    timeframe, source)
                                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                                """, (
                                    alert["symbol"],
                                    alert["level_price"],
                                    alert["current_price"],
                                    alert["type"],
                                    alert["distance"],
                                    alert["strength"],
                                    alert["timeframe"],
                                    alert.get("source", "level")
                                ))
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)

    def get_alerts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT symbol, level_price AS price, type AS signal_type, timeframe
                    FROM alerts
                    ORDER BY created_at DESC
                    LIMIT 200
                """)
                columns = [desc[0] for desc in cur.description]
                return [dict(zip(columns, row)) for row in cur.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
        finally:
            self.release_connection(conn)

    def save_signals(self, signals):
        if not signals:
            logger.info("üì≠ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        query = """
        INSERT INTO signals (
            symbol, timeframe, signal_type, price,
            recommendation, score, details, current_price, time
        )
        VALUES %s
        ON CONFLICT (symbol, timeframe, signal_type, time) DO UPDATE
        SET current_price = EXCLUDED.current_price,
            recommendation = EXCLUDED.recommendation,
            score = EXCLUDED.score,
            details = EXCLUDED.details
        """

        # –£–±–∏—Ä–∞–µ–º np.float64 ‚Üí float
        for s in signals:
            if isinstance(s.get("current_price"), np.generic):
                s["current_price"] = float(s["current_price"])

        values = [
            (
                s["symbol"],
                s["timeframe"],
                s["signal_type"],
                s.get("price", s.get("current_price", 0.0)),  # ‚Üí –ø–æ–ª–µ price
                s.get("recommendation", ""),
                s.get("score", 0),
                s.get("details", ""),
                s.get("current_price", 0.0),
                int(time.time() * 1000)
            )
            for s in signals
        ]

        conn = self.connection_pool.getconn()
        try:
            with conn.cursor() as cur:
                execute_values(cur, query, values)
            conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        finally:
            self.connection_pool.putconn(conn)

    def get_signals(self, limit=100):
        query = """
        SELECT symbol, timeframe, signal_type, current_price, recommendation, score, details, time
        FROM signals
        ORDER BY time DESC
        LIMIT %s
        """
        conn = self.connection_pool.getconn()
        try:
            with conn.cursor() as cur:
                cur.execute(query, (limit,))
                rows = cur.fetchall()
        finally:
            self.connection_pool.putconn(conn)

        result = []
        for row in rows:
            result.append({
                "symbol": row[0],
                "timeframe": row[1],
                "signal_type": row[2],
                "current_price": row[3],
                "recommendation": row[4],
                "score": row[5],
                "details": row[6],
                "created_at": int(row[7]) // 1000  # UNIX timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            })
        return result

    def get_indicators(self, symbol, timeframe):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –ø–∞—Ä–µ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT indicator_type, value
                    FROM indicators
                    WHERE symbol = %s AND timeframe = %s
                    ORDER BY created_at DESC
                """, (symbol, timeframe))
                rows = cur.fetchall()
                return {row[0]: row[1] for row in rows}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
        finally:
            self.release_connection(conn)

    def get_market_cap(self, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT total_cap, fetched_at
                    FROM market_cap
                    WHERE fetched_at >= NOW() - INTERVAL '%s days'
                    ORDER BY fetched_at ASC
                """, (days,))
                return cur.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return []
        finally:
            self.release_connection(conn)

    def truncate_all_tables(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        logger.info("‚è≥ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü...")
        tables = [
            "collected_candles", "levels", "alerts",
            "pairs_cache", "trend_cache", "indicators", "signals"
        ]
        conn = self.get_connection()
        try:
            with conn.cursor() as cur:
                for table in tables:
                    cur.execute(f"TRUNCATE TABLE {table};")
                    logger.debug(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –æ—á–∏—â–µ–Ω–∞")
            conn.commit()
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            conn.rollback()
        finally:
            self.release_connection(conn)


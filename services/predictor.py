import logging
from typing import List, Tuple, Optional

from database.database import DatabaseManager

logger = logging.getLogger(__name__)


class Predictor:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (TP1‚ÄëTP3 / SL + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)
    —Å —É—á—ë—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR), –∫–æ–º–∏—Å—Å–∏–∏, —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ **–∏** –º–∞—Å—à—Ç–∞–±–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.

    ‚ùï¬†–ö—Ä—É–ø–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º ‚áí —à–∏—Ä–µ —Ü–µ–ª–∏ –∏ —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å.
    """

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫‚Äë–ø—Ä–æ—Ñ–∏–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    MIN_PROFIT = {1: 0.02, 2: 0.04, 3: 0.07}   # 2¬†%¬†/¬†4¬†%¬†/¬†7¬†%
    ATR_MULT   = {1: 1.0, 2: 2.0, 3: 3.5}
    SL_MULT    = 1.2                           # —Å—Ç–æ–ø ‚â•¬†1.2¬†√ó¬†ATR
    FEE_PCT    = 0.001                         # 0.1¬†% –∫–æ–º–∏—Å—Å–∏—è (in¬†+¬†out)

    # –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    TF_FACTOR = {
        "15m": 1.0,
        "30m": 1.2,
        "1h": 1.5,
        "4h": 2.5,
        "1d": 4.0,
    }

    def __init__(self):
        self.db = DatabaseManager()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PUBLIC API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def analyze_all(self, limit: int = 50) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º *limit* —Å–∏–≥–Ω–∞–ª–∞–º."""
        signals = self.db.get_signals(limit=limit)
        return [self.analyze_signal(sig) for sig in signals]

    def analyze_signal(self, signal: dict) -> dict:
        symbol: str = signal["symbol"]
        timeframe: str = signal["timeframe"]
        price: float = float(signal.get("current_price", 0))

        # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ ------------------------------------------------
        rsi        = float(signal.get("rsi")        or 0)
        macd_hist  = float(signal.get("macd_hist")  or signal.get("macd") or 0)
        ema50      = float(signal.get("ema50")      or 0)
        ema200     = float(signal.get("ema200")     or 0)
        stoch_k    = float(signal.get("stoch_k")    or 0)
        stoch_d    = float(signal.get("stoch_d")    or 0)
        bb_pos     = float(signal.get("bb_position")or 0)
        vwap       = float(signal.get("vwap")       or 0)
        atr        = float(signal.get("atr")        or 1e-6)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω—É–ª—è
        adx        = float(signal.get("adx")        or 0)
        poc        = float(signal.get("poc")        or 0)

        # —Ç—Ä–µ–Ω–¥ ---------------------------------------------------------------
        trend_data = self.db.get_trend(symbol) or {}
        trend      = trend_data.get("direction", "").lower()
        direction  = "long" if trend == "bullish" else "short"

        # —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ ----------------------------------------------------
        fibo_levels = self.db.get_fibo_levels(symbol, timeframe) or []

        # –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ ------------------------------------------------------
        entry_note = self._build_entry_note(
            price, rsi, stoch_k, stoch_d, ema50, adx, vwap, poc, bb_pos
        )

        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        tf_factor = self.TF_FACTOR.get(timeframe.lower(), 1.0)

        # —Ü–µ–ª–∏ –∏ —Å—Ç–æ–ø ---------------------------------------------------------
        tp1, tp2, tp3, sl = self._calc_targets(
            price, atr, direction, fibo_levels, tf_factor
        )

        # –ø—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ------------------------------------
        score = 0
        if trend == "bullish" and direction == "long":
            score += 1
        if trend == "bearish" and direction == "short":
            score += 1
        if rsi < 40 or rsi > 60:
            score += 1
        if adx > 20:
            score += 1
        if bb_pos < 20 or bb_pos > 80:
            score += 1
        if (direction == "long" and price < vwap) or (direction == "short" and price > vwap):
            score += 1

        recommendation = (
            "‚úÖ –ú–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å ‚Äî —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª" if score >= 5 else
            "üîÑ –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"       if score >= 3 else
            "‚õî –ù–µ –≤—Ö–æ–¥–∏—Ç—å ‚Äî —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª"
        )

        return {
            "symbol": symbol,
            "timeframe": timeframe,
            "entry_price": price,
            "trend": trend,
            "direction": direction,
            "entry_note": "; ".join(entry_note),
            "tp1": tp1,
            "tp2": tp2,
            "tp3": tp3,
            "stop_loss": sl,
            "recommendation": recommendation,
        }

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _build_entry_note(
        self,
        price: float,
        rsi: float,
        stoch_k: float,
        stoch_d: float,
        ema50: float,
        adx: float,
        vwap: float,
        poc: float,
        bb_pos: float,
    ) -> List[str]:
        notes: List[str] = []
        if stoch_k < 20 and stoch_d < 20:
            notes.append("Stochastic –≤ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
        if rsi < 40:
            notes.append("RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
        if price < ema50:
            notes.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA50")
        if adx > 20:
            notes.append(f"ADX: {adx:.1f} ‚Äî —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        if price < vwap:
            notes.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ VWAP ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫")
        if price > poc:
            notes.append("–í—ã—à–µ POC ‚Äî –æ–±—ä—ë–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É")
        if bb_pos < 20:
            notes.append("Bollinger Bands: –≤ –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ")
        return notes

    # -----------------------------------------------------------------------
    def _calc_targets(
        self,
        price: float,
        atr: float,
        side: str,
        fibo_levels: List[dict],
        tf_factor: float,
    ) -> Tuple[float, float, float, float]:
        """TP1‚Äë3 –∏ SL —Å —É—á—ë—Ç–æ–º ATR, min‚Äëprofit –∏ –º–∞—Å—à—Ç–∞–±–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""

        def _delta(n: int) -> float:
            raw = atr * self.ATR_MULT[n] * tf_factor
            pct = price * (self.MIN_PROFIT[n] * tf_factor + self.FEE_PCT * 2)
            return max(raw, pct)

        deltas = {n: _delta(n) for n in (1, 2, 3)}

        # —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–¥–µ–ª–∫–∏ ------------------
        fibo_sorted = sorted(
            (float(l["price"]) for l in fibo_levels),
            reverse=(side == "short")
        )
        def _nearest_level(target_price: float) -> Optional[float]:
            if not fibo_sorted:
                return None
            if side == "long":
                for lvl in fibo_sorted:
                    if lvl > price and lvl >= target_price:
                        return lvl
            else:
                for lvl in fibo_sorted:
                    if lvl < price and lvl <= target_price:
                        return lvl
            return None

        # –∏—Ç–æ–≥–æ–≤—ã–µ TP/SL ----------------------------------------------------
        if side == "long":
            tp1_raw = price + deltas[1]
            tp1 = _nearest_level(tp1_raw) or tp1_raw
            tp2_raw = price + deltas[2]
            tp2 = _nearest_level(tp2_raw) or tp2_raw
            tp3_raw = price + deltas[3]
            tp3 = _nearest_level(tp3_raw) or tp3_raw
            sl_delta = max(atr * self.SL_MULT * tf_factor, abs(tp1 - price) / 2)
            sl = price - sl_delta
        else:
            tp1_raw = price - deltas[1]
            tp1 = _nearest_level(tp1_raw) or tp1_raw
            tp2_raw = price - deltas[2]
            tp2 = _nearest_level(tp2_raw) or tp2_raw
            tp3_raw = price - deltas[3]
            tp3 = _nearest_level(tp3_raw) or tp3_raw
            sl_delta = max(atr * self.SL_MULT * tf_factor, abs(tp1 - price) / 2)
            sl = price + sl_delta

        return (round(tp1, 8), round(tp2, 8), round(tp3, 8), round(sl, 8))


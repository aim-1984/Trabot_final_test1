import logging
import pandas as pd
from database.database import DatabaseManager
from services.fibo_engine import FiboEngine
from services.signal_score import SignalScorer
from services.alert_engine import AlertSystem

logger = logging.getLogger(__name__)

class SignalEngine:
    def __init__(self):
        self.db = DatabaseManager()
        self.fibo = FiboEngine()
        self.scorer = SignalScorer()

    def generate_signals(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—à–µ–¥—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —Å–≤–µ—á–µ–π...")



        alerts = AlertSystem().check_alerts()
        if not alerts:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        all_candles = self.db.get_all_candles()
        all_levels = self.db.get_levels()
        signals = []


        for alert in alerts:
            signal_type = alert.get("signal_type") or alert.get("type")
            if not signal_type:
                logger.debug(f"‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫ –∞–ª–µ—Ä—Ç–∞ –±–µ–∑ —Ç–∏–ø–∞: {symbol} {tf}")
                continue
            try:
                symbol = alert["symbol"]
                tf = alert["timeframe"]
                if (candles := all_candles.get((symbol, tf))) is None or len(candles) < 50:
                    continue

                df = pd.DataFrame(candles)
                df["close"] = pd.to_numeric(df["close"])
                close_price = df["close"].iloc[-1]

                # ‚îÄ‚îÄ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                db_ind = self.db.get_indicators(symbol, tf)
                get = lambda k: float(db_ind[k]) if db_ind.get(k) is not None else None

                indicators = {
                    "rsi": get("RSI"),
                    "macd": get("MACD"),
                    "macd_hist": get("MACD"),
                    "ema50": get("EMA50"),
                    "ema200": get("EMA200"),
                    "bb_upper": get("BB_UPPER"),
                    "bb_lower": get("BB_LOWER"),
                    "stoch_k": get("STOCH_K"),
                    "stoch_d": get("STOCH_D"),
                    "atr": get("ATR"),
                    "adx": get("ADX"),
                    "vwap": get("VWAP"),
                    "poc": get("POC"),
                }

                # ‚îÄ‚îÄ –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                trend_data = self.db.get_trend(symbol)
                fibo = self.fibo.calculate_for_pair(symbol, tf)
                levels = [lvl for lvl in all_levels if lvl["symbol"] == symbol and lvl["timeframe"] == tf]
                market_cap_data = self.db.get_market_cap()


                def calculate_bb_position(price, upper, lower):
                    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –æ—Ç 0 –¥–æ 1"""
                    if upper is None or lower is None or upper == lower:
                        return None
                    return (price - lower) / (upper - lower)

                bb_pos = calculate_bb_position(close_price, indicators["bb_upper"], indicators["bb_lower"])

                signal_meta = {
                    "symbol": symbol,
                    "timeframe": tf,
                    "signal_type": signal_type,
                    "price": alert.get("price"),
                    "current_price": close_price,
                    "rsi": indicators["rsi"],
                    "macd": indicators["macd"],
                    "ema50": indicators["ema50"],
                    "ema200": indicators["ema200"],
                    "bb_position": bb_pos,
                    "stoch_k": indicators["stoch_k"],
                    "stoch_d": indicators["stoch_d"],
                    "atr": indicators["atr"],
                    "adx": indicators["adx"],
                    "vwap": indicators["vwap"],
                    "poc": indicators["poc"],
                }

                result = self.scorer.evaluate(
                    trend_data,
                    levels,
                    indicators,
                    fibo["fibo_levels"] if fibo else {},
                    market_cap_data,
                    signal_meta
                )

                # ‚îÄ‚îÄ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                det = [
                    f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {close_price:.6f}",
                    f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: RSI: {indicators['rsi']:.2f}" if indicators["rsi"] is not None else None,
                    f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: MACD –≥–∏—Å—Ç.: {indicators['macd_hist']:.6f}" if indicators["macd_hist"] is not None else None,
                    f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: EMA-50: {indicators['ema50']:.6f}" if indicators["ema50"] is not None else None,
                    f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: EMA-200: {indicators['ema200']:.6f}" if indicators["ema200"] is not None else None,
                    (
                        f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: Bollinger Bands: –≤–µ—Ä—Ö {indicators['bb_upper']:.6f}, "
                        f"–Ω–∏–∑ {indicators['bb_lower']:.6f}"
                    ) if indicators["bb_upper"] is not None and indicators["bb_lower"] is not None else None,
                    (
                        f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: Stochastic %K={indicators['stoch_k']:.2f}, "
                        f"%D={indicators['stoch_d']:.2f}"
                    ) if indicators["stoch_k"] is not None and indicators["stoch_d"] is not None else None,
                ]
                # —É–±–∏—Ä–∞–µ–º None –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ Scorer
                details = [d for d in det if d] + result["details"]

                # ‚îÄ‚îÄ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                signals.append({
                    "symbol": symbol,
                    "timeframe": tf,
                    "signal_type":    signal_type,
                    "current_price": close_price,
                    "recommendation": result["recommendation"],
                    "score": result["score"],
                    "created_at": alert.get("created_at"),
                    "details": "\n".join(details),
                    "rsi": indicators["rsi"],
                    "macd": indicators["macd_hist"],
                    "ema50": indicators["ema50"],
                    "ema200": indicators["ema200"],
                    "bb_position": None,  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å
                    "stoch_k": indicators["stoch_k"],
                    "stoch_d": indicators["stoch_d"],
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {alert.get('symbol')} {alert.get('timeframe')}: {e}", exc_info=True)

        # ‚îÄ‚îÄ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if signals:
            # ‚îÄ‚îÄ dedup –ø–æ –∫–ª—é—á—É (symbol, timeframe, signal_type) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            deduped: dict[tuple, dict] = {}
            for sig in signals:
                key = (sig["symbol"], sig["timeframe"], sig["signal_type"])
                # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ score –≤—ã—à–µ
                if key not in deduped or sig["score"] > deduped[key]["score"]:
                    deduped[key] = sig

            signals = list(deduped.values())
            self.db.save_signals(signals)
            logger.info(f"‚úÖ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(signals)}")
        else:
            logger.info("üì≠ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return signals

    def _resolve_signal_type(self, alert):
        source = (alert.get("type") or "").lower()
        if source in ["support", "ema50", "fibo", "supertrend"]:
            return "long"
        elif source in ["resistance", "ema200"]:
            return "short"
        return "long"
